const rootScope=GetRootScope();const languagesData=[{name:'Português',code:'br'},{name:'中文',code:'cn'},{name:'Dansk',code:'da'},{name:'Deutsch',code:'de'},{name:'English',code:'en'},{name:'Español',code:'es'},{name:'Français',code:'fr'},{name:'Magyar',code:'hu'},{name:'Italiano',code:'it'},{name:'日本語',code:'jp'},{name:'한국어',code:'kr'},{name:'Norsk',code:'no'},{name:'Русский',code:'ru'},{name:'Türkçe',code:'tr'},{name:'Svenska',code:'sv'}];class LanguagesModule{constructor(){this.currentMod;this.supportedLanguages;this.defaultLanguage={name:'English',code:'en'};this.currentLanguage=this.defaultLanguage}init(mod,langs,viewName=null){this.currentMod=Game.mods.find(gm=>{return gm.id==mod.modId});this.currentMod.view_name=viewName;this.setSupportedLanguages(langs)}initSettings(settings){if(typeof(this.supportedLanguages)==='undefined'){console.error("Failed to init languages module. The mod \""+this.currentMod.name+"\" doesn't have define translations.")}let languageCode;if(typeof(settings[this.currentMod.id])!=='undefined'){languageCode=settings[this.currentMod.id].language}else{settings[this.currentMod.id]={language:rootScope.options.language};languageCode=rootScope.options.language}let language=this.findLanguage(languageCode);if(language===false){if(languageCode===this.defaultLanguage.code){console.error("Error : default "+this.defaultLanguage.name+" translation is missing, skip loading language.");return}else{console.error("Error : Your language saved in mod settings can't be load. "+this.defaultLanguage.name+" language will be set as your mod language (for this mod only). You should contact the mod developer to ask him if he dropped your old language setting.");this.updateSettingsLanguage(this.defaultLanguage);this.initSettings(rootScope.settings);return}}this.loadLanguage(language)}loadLanguage(language){let self=this;$.getJSON(this.currentMod.modPath+'/locales/'+language.code+'.json',function(jsonData){$.each(jsonData,function(name,value){rootScope.Language[name]=value});self.updateSettingsLanguage(language)}).fail(function(){if(language.code!==self.defaultLanguage.code){self.loadLanguage(self.defaultLanguage);self.updateSettingsLanguage(self.defaultLanguage)}else{console.error("The mod \""+self.currentMod.name+"\" doesn't have "+self.defaultLanguage.name+" translation. It should always have "+self.defaultLanguage.name+" as base translation.")}})}updateLanguage(lang){this.loadLanguage(lang);if(this.currentMod.view_name!==null){rootScope.closeAllUi();let self=this;setTimeout(function(){rootScope.setActiveView(self.currentMod.view_name)},0)}}updateSettingsLanguage(lang){rootScope.settings[this.currentMod.id].language=lang.code;this.updateModuleLanguage(lang);this.currentLanguage=lang}updateModuleLanguage(lang){let self=this;$.ajax({url:this.currentMod.modPath+'../languages_module/locales/'+lang.code+'.json',dataType:'json',async:false,success:function(jsonData){$.each(jsonData,function(name,value){let keyName=name+'.'+self.currentMod.id;rootScope.Language[keyName]=value})},error:function(){if(lang.code!==self.defaultLanguage.code){self.updateModuleLanguage(self.defaultLanguage)}else{console.error("The \"Languages module\" doesn't have "+self.defaultLanguage.name+" translation. Contact me on Discord (Azul#8005 @ https://discord.gg/hovgaardgames) to report the bug.")}}})}setSupportedLanguages(langs){let self=this;let languagesPushed=[];langs.forEach(function(lang){if(typeof lang.code==='undefined'){console.error("The mod \""+self.currentMod.name+"\" doesn't correctly initialize a language. Language property \"code\" is required.")}else{let lng=languagesData.find(function(ld){return ld.code===lang.code});if(lng){languagesPushed.push(lng)}else{if(typeof lang.name==='undefined'){console.error("The mod \""+self.currentMod.name+"\" doesn't correctly initialize a language (code \""+lang.code+"\"). Language property \"name\" is required.")}else{languagesPushed.push(lang)}}}});this.supportedLanguages=languagesPushed}getSupportedLanguages(){return this.supportedLanguages}findLanguage(languageCode){let lang=this.supportedLanguages.find(lang=>{return lang.code==languageCode});if(typeof(lang)!=='undefined'){return lang}else{return false}}getCurrentLanguage(){let self=this;return this.supportedLanguages.find(lang=>{return lang.code==rootScope.settings[self.currentMod.id].language})}getView(){return this.currentMod.modPath+'../languages_module/views/select.html'}getLocalized(name){let keyName=name+'.'+this.currentMod.id;return rootScope.Helpers.GetLocalized(keyName)}}module.exports={LanguagesModule:LanguagesModule};